const local_index = {"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Panel fruithost is an OpenSource Hosting-Panel for some Linux Distributions (later maybe also for Windows). With fruithost you get a real alternative to confixx/Plesk, ISPConfig, froxlor and other derivatives. Whether private or professional , with fruithost you get a clean and simple solution to manage your servers. Security comes first at fruithost - that's why we only use up-to-date software and do without miserable old solutions. If you have an MIT license , you can use fruithost for any scenario! Running a server has never been so easy! Installation All informations and installations-instructions can be find in the Documentation ! Support us! Donations are an important contribution to the development of OpenSource projects. With your donation you can help us to advance our project. Your support enables us to support the programming. Be a team-player, all feedbacks of our donations will have the priority. We will build the site for YOU ! Community Contributing Feel free to help us with the developing! Demonstration Demo: http://my.fruithost.de/ ~~ Request: https://forms.gle/eS7E4MYSVKiiigw77 ( Currently not maintained! )~~ [!WARNING] Currently we do not offer any public demo users! ~~If you want to watch the demo, write to us - We will set up a personal account for you to test fruithost!~~ Screenshot","title":"Panel"},{"location":"index.html#panel","text":"fruithost is an OpenSource Hosting-Panel for some Linux Distributions (later maybe also for Windows). With fruithost you get a real alternative to confixx/Plesk, ISPConfig, froxlor and other derivatives. Whether private or professional , with fruithost you get a clean and simple solution to manage your servers. Security comes first at fruithost - that's why we only use up-to-date software and do without miserable old solutions. If you have an MIT license , you can use fruithost for any scenario! Running a server has never been so easy!","title":"Panel"},{"location":"index.html#installation","text":"All informations and installations-instructions can be find in the Documentation !","title":"Installation"},{"location":"index.html#support-us","text":"Donations are an important contribution to the development of OpenSource projects. With your donation you can help us to advance our project. Your support enables us to support the programming. Be a team-player, all feedbacks of our donations will have the priority. We will build the site for YOU !","title":"Support us!"},{"location":"index.html#community","text":"","title":"Community"},{"location":"index.html#contributing","text":"Feel free to help us with the developing!","title":"Contributing"},{"location":"index.html#demonstration","text":"Demo: http://my.fruithost.de/ ~~ Request: https://forms.gle/eS7E4MYSVKiiigw77 ( Currently not maintained! )~~ [!WARNING] Currently we do not offer any public demo users! ~~If you want to watch the demo, write to us - We will set up a personal account for you to test fruithost!~~","title":"Demonstration"},{"location":"index.html#screenshot","text":"","title":"Screenshot"},{"location":"default/js/codemirror/index.html","text":"How to Build? npm install npm start The builded editor will be bundled on build/bundle.js .","title":"How to Build?"},{"location":"default/js/codemirror/index.html#how-to-build","text":"npm install npm start The builded editor will be bundled on build/bundle.js .","title":"How to Build?"},{"location":"libraries/Parsedown/index.html","text":"Parsedown Better Markdown Parser in PHP \u2014 Demo . Features One File No Dependencies Super Fast Extensible GitHub flavored Tested in 5.3 to 7.3 Markdown Extra extension Installation Install the composer package : composer require erusev/parsedown Or download the latest release and include Parsedown.php Example $Parsedown = new Parsedown(); echo $Parsedown->text('Hello _Parsedown_!'); # prints: <p>Hello <em>Parsedown</em>!</p> You can also parse inline markdown only: echo $Parsedown->line('Hello _Parsedown_!'); # prints: Hello <em>Parsedown</em>! More examples in the wiki and in this video tutorial . Security Parsedown is capable of escaping user-input within the HTML that it generates. Additionally Parsedown will apply sanitisation to additional scripting vectors (such as scripting link destinations) that are introduced by the markdown syntax itself. To tell Parsedown that it is processing untrusted user-input, use the following: $Parsedown->setSafeMode(true); If instead, you wish to allow HTML within untrusted user-input, but still want output to be free from XSS it is recommended that you make use of a HTML sanitiser that allows HTML tags to be whitelisted, like HTML Purifier . In both cases you should strongly consider employing defence-in-depth measures, like deploying a Content-Security-Policy (a browser security feature) so that your page is likely to be safe even if an attacker finds a vulnerability in one of the first lines of defence above. Safe mode does not necessarily yield safe results when using extensions to Parsedown. Extensions should be evaluated on their own to determine their specific safety against XSS. Escaping HTML WARNING: This method is not safe from XSS! If you wish to escape HTML in trusted input, you can use the following: $Parsedown->setMarkupEscaped(true); Beware that this still allows users to insert unsafe scripting vectors, ex: [xss](javascript:alert%281%29) . Questions How does Parsedown work? It tries to read Markdown like a human. First, it looks at the lines. It\u2019s interested in how the lines start. This helps it recognise blocks. It knows, for example, that if a line starts with a - then perhaps it belongs to a list. Once it recognises the blocks, it continues to the content. As it reads, it watches out for special characters. This helps it recognise inline elements (or inlines). We call this approach \"line based\". We believe that Parsedown is the first Markdown parser to use it. Since the release of Parsedown, other developers have used the same approach to develop other Markdown parsers in PHP and in other languages. Is it compliant with CommonMark? It passes most of the CommonMark tests. Most of the tests that don't pass deal with cases that are quite uncommon. Still, as CommonMark matures, compliance should improve. Who uses it? Laravel Framework , Bolt CMS , Grav CMS , Herbie CMS , Kirby CMS , October CMS , Pico CMS , Statamic CMS , phpDocumentor , RaspberryPi.org , Symfony Demo and more . How can I help? Use it, star it, share it and if you feel generous, donate . What else should I know? I also make Nota \u2014 a writing app designed for Markdown files :)","title":"Index"},{"location":"libraries/Parsedown/index.html#parsedown","text":"Better Markdown Parser in PHP \u2014 Demo .","title":"Parsedown"},{"location":"libraries/Parsedown/index.html#features","text":"One File No Dependencies Super Fast Extensible GitHub flavored Tested in 5.3 to 7.3 Markdown Extra extension","title":"Features"},{"location":"libraries/Parsedown/index.html#installation","text":"Install the composer package : composer require erusev/parsedown Or download the latest release and include Parsedown.php","title":"Installation"},{"location":"libraries/Parsedown/index.html#example","text":"$Parsedown = new Parsedown(); echo $Parsedown->text('Hello _Parsedown_!'); # prints: <p>Hello <em>Parsedown</em>!</p> You can also parse inline markdown only: echo $Parsedown->line('Hello _Parsedown_!'); # prints: Hello <em>Parsedown</em>! More examples in the wiki and in this video tutorial .","title":"Example"},{"location":"libraries/Parsedown/index.html#security","text":"Parsedown is capable of escaping user-input within the HTML that it generates. Additionally Parsedown will apply sanitisation to additional scripting vectors (such as scripting link destinations) that are introduced by the markdown syntax itself. To tell Parsedown that it is processing untrusted user-input, use the following: $Parsedown->setSafeMode(true); If instead, you wish to allow HTML within untrusted user-input, but still want output to be free from XSS it is recommended that you make use of a HTML sanitiser that allows HTML tags to be whitelisted, like HTML Purifier . In both cases you should strongly consider employing defence-in-depth measures, like deploying a Content-Security-Policy (a browser security feature) so that your page is likely to be safe even if an attacker finds a vulnerability in one of the first lines of defence above. Safe mode does not necessarily yield safe results when using extensions to Parsedown. Extensions should be evaluated on their own to determine their specific safety against XSS.","title":"Security"},{"location":"libraries/Parsedown/index.html#escaping-html","text":"WARNING: This method is not safe from XSS! If you wish to escape HTML in trusted input, you can use the following: $Parsedown->setMarkupEscaped(true); Beware that this still allows users to insert unsafe scripting vectors, ex: [xss](javascript:alert%281%29) .","title":"Escaping HTML"},{"location":"libraries/Parsedown/index.html#questions","text":"How does Parsedown work? It tries to read Markdown like a human. First, it looks at the lines. It\u2019s interested in how the lines start. This helps it recognise blocks. It knows, for example, that if a line starts with a - then perhaps it belongs to a list. Once it recognises the blocks, it continues to the content. As it reads, it watches out for special characters. This helps it recognise inline elements (or inlines). We call this approach \"line based\". We believe that Parsedown is the first Markdown parser to use it. Since the release of Parsedown, other developers have used the same approach to develop other Markdown parsers in PHP and in other languages. Is it compliant with CommonMark? It passes most of the CommonMark tests. Most of the tests that don't pass deal with cases that are quite uncommon. Still, as CommonMark matures, compliance should improve. Who uses it? Laravel Framework , Bolt CMS , Grav CMS , Herbie CMS , Kirby CMS , October CMS , Pico CMS , Statamic CMS , phpDocumentor , RaspberryPi.org , Symfony Demo and more . How can I help? Use it, star it, share it and if you feel generous, donate . What else should I know? I also make Nota \u2014 a writing app designed for Markdown files :)","title":"Questions"},{"location":"libraries/skoerfgen/index.html","text":"ACMECert PHP client library for Let's Encrypt and other ACME v2 - RFC 8555 compatible Certificate Authorities. Version: 3.2.2 Description ACMECert is designed to help you to setup an automated SSL/TLS-certificate/renewal process with a few lines of PHP. It is self contained and contains a set of functions allowing you to: generate RSA / EC (Elliptic Curve) keys manage account: register / External Account Binding (EAB) / update / deactivate and account key roll-over get / revoke certificates (to renew a certificate just get a new one) parse certificates / get the remaining days a certificate is still valid and more.. see Function Reference for a full list It abstracts away the complexity of the ACME protocol to get a certificate (create order, fetch authorizations, compute challenge tokens, polling for status, generate CSR, finalize order, request certificate) into a single function getCertificateChain (or getCertificateChains to also get all alternate chains), where you specify a set of domains you want to get a certificate for and which challenge type to use (all challenge types are supported). This function takes as third argument a user-defined callback function which gets invoked every time a challenge needs to be fulfilled. It is up to you to set/remove the challenge tokens: $handler=function($opts){ // Write code to setup the challenge token here. // Return a function that gets called when the challenge token should be removed again: return function($opts){ // Write code to remove previously setup challenge token. }; }; $ac->getCertificateChain(..., ..., $handler); see description of getCertificateChain for details about the callback function. also see the Get Certificate examples below. Instead of returning FALSE on error, every function in ACMECert throws an Exception if it fails or an ACME_Exception if the ACME-Server reponded with an error message. Requirements PHP 5.3 or higher (for EC keys PHP 7.1 or higher is required) OpenSSL extension enabled fopen wrappers (allow_url_fopen=1) or cURL extension Require ACMECert manual download: https://github.com/skoerfgen/ACMECert/archive/master.zip usage: require 'ACMECert.php'; use skoerfgen\\ACMECert\\ACMECert; or download it using git : git clone https://github.com/skoerfgen/ACMECert usage: require 'ACMECert/ACMECert.php'; use skoerfgen\\ACMECert\\ACMECert; or download it using composer : composer require skoerfgen/acmecert usage: require 'vendor/autoload.php'; use skoerfgen\\ACMECert\\ACMECert; Usage / Examples Simple example to get started Choose Certificate Authority (CA) Let's Encrypt Live CA $ac=new ACMECert('https://acme-v02.api.letsencrypt.org/directory'); Staging CA $ac=new ACMECert('https://acme-staging-v02.api.letsencrypt.org/directory'); Buypass Live CA $ac=new ACMECert('https://api.buypass.com/acme/directory'); Staging CA $ac=new ACMECert('https://api.test4.buypass.no/acme/directory'); Google Trust Services Live CA $ac=new ACMECert('https://dv.acme-v02.api.pki.goog/directory'); Staging CA $ac=new ACMECert('https://dv.acme-v02.test-api.pki.goog/directory'); SSL.com Live CA $ac=new ACMECert('https://acme.ssl.com/sslcom-dv-rsa'); ZeroSSL Live CA $ac=new ACMECert('https://acme.zerossl.com/v2/DV90'); or any other ( ACME v2 - RFC 8555 ) compatible CA $ac=new ACMECert('INSERT_URL_TO_AMCE_CA_DIRECTORY_HERE'); Generate RSA Private Key $key=$ac->generateRSAKey(2048); file_put_contents('account_key.pem',$key); Equivalent to: openssl genrsa -out account_key.pem 2048 Generate EC Private Key $key=$ac->generateECKey('P-384'); file_put_contents('account_key.pem',$key); Equivalent to: openssl ecparam -name secp384r1 -genkey -noout -out account_key.pem Register Account Key with CA $ac->loadAccountKey('file://'.'account_key.pem'); $ret=$ac->register(true,'info@example.com'); print_r($ret); Register Account Key with CA using External Account Binding $ac->loadAccountKey('file://'.'account_key.pem'); $ret=$ac->registerEAB(true,'INSERT_EAB_KEY_ID_HERE','INSERT_EAB_HMAC_HERE','info@example.com'); print_r($ret); Get Certificate using http-01 challenge $ac->loadAccountKey('file://'.'account_key.pem'); $domain_config=array( 'test1.example.com'=>array('challenge'=>'http-01','docroot'=>'/var/www/vhosts/test1.example.com'), 'test2.example.com'=>array('challenge'=>'http-01','docroot'=>'/var/www/vhosts/test2.example.com') ); $handler=function($opts){ $fn=$opts['config']['docroot'].$opts['key']; @mkdir(dirname($fn),0777,true); file_put_contents($fn,$opts['value']); return function($opts){ unlink($opts['config']['docroot'].$opts['key']); }; }; // Generate new certificate key $private_key=$ac->generateRSAKey(2048); $fullchain=$ac->getCertificateChain($private_key,$domain_config,$handler); file_put_contents('fullchain.pem',$fullchain); file_put_contents('private_key.pem',$private_key); Get Certificate using all ( http-01 , dns-01 and tls-alpn-01 ) challenge types together $ac->loadAccountKey('file://'.'account_key.pem'); $domain_config=array( 'example.com'=>array('challenge'=>'http-01','docroot'=>'/var/www/vhosts/example.com'), '*.example.com'=>array('challenge'=>'dns-01'), 'test.example.org'=>array('challenge'=>'tls-alpn-01') ); $handler=function($opts) use ($ac){ switch($opts['config']['challenge']){ case 'http-01': // automatic example: challenge directory/file is created.. $fn=$opts['config']['docroot'].$opts['key']; @mkdir(dirname($fn),0777,true); file_put_contents($fn,$opts['value']); return function($opts) use ($fn){ // ..and removed after validation completed unlink($fn); }; break; case 'dns-01': // manual example: echo 'Create DNS-TXT-Record '.$opts['key'].' with value '.$opts['value'].\"\\n\"; readline('Ready?'); return function($opts){ echo 'Remove DNS-TXT-Record '.$opts['key'].' with value '.$opts['value'].\"\\n\"; }; break; case 'tls-alpn-01': $cert=$ac->generateALPNCertificate('file://'.'some_private_key.pem',$opts['domain'],$opts['value']); // Use $cert and some_private_key.pem(<- does not have to be a specific key, // just make sure you generated one) to serve the certificate for $opts['domain'] // This example uses an included ALPN Responder - a standalone https-server // written in a few lines of node.js - which is able to complete this challenge. // store the generated verification certificate to be used by the ALPN Responder. file_put_contents('alpn_cert.pem',$cert); // To keep this example simple, the included Example ALPN Responder listens on port 443, // so - for the sake of this example - you have to stop the webserver here, like: shell_exec('/etc/init.d/apache2 stop'); // Start ALPN Responder (requires node.js) $resource=proc_open( 'node alpn_responder.js some_private_key.pem alpn_cert.pem', array( 0=>array('pipe','r'), 1=>array('pipe','w') ), $pipes ); // wait until alpn responder is listening fgets($pipes[1]); return function($opts) use ($resource,$pipes){ // Stop ALPN Responder fclose($pipes[0]); fclose($pipes[1]); proc_close($resource); shell_exec('/etc/init.d/apache2 start'); }; break; } }; // Example for using a pre-generated CSR as input to getCertificateChain instead of a private key: // $csr=$ac->generateCSR('file://'.'cert_private_key.pem',array_keys($domain_config)); // $fullchain=$ac->getCertificateChain($csr,$domain_config,$handler); $fullchain=$ac->getCertificateChain('file://'.'cert_private_key.pem',$domain_config,$handler); file_put_contents('fullchain.pem',$fullchain); Get alternate chains $chains=$ac->getCertificateChains('file://'.'cert_private_key.pem',$domain_config,$handler); if (isset($chains['ISRG Root X1'])){ // use alternate chain 'ISRG Root X1' $fullchain=$chains['ISRG Root X1']; }else{ // use default chain if 'ISRG Root X1' is not present $fullchain=reset($chains); } file_put_contents('fullchain.pem',$fullchain); Revoke Certificate $ac->loadAccountKey('file://'.'account_key.pem'); $ac->revoke('file://'.'fullchain.pem'); Get Account Information $ac->loadAccountKey('file://'.'account_key.pem'); $ret=$ac->getAccount(); print_r($ret); Account Key Roll-over $ac->loadAccountKey('file://'.'account_key.pem'); $ret=$ac->keyChange('file://'.'new_account_key.pem'); print_r($ret); Deactivate Account $ac->loadAccountKey('file://'.'account_key.pem'); $ret=$ac->deactivateAccount(); print_r($ret); Get Remaining Days $days=$ac->getRemainingDays('file://'.'fullchain.pem'); // certificate or certificate-chain if ($days>30) { // renew 30 days before expiry die('Certificate still good, exiting..'); } // get new certificate here.. This allows you to run your renewal script without the need to time it exactly, just run it often enough. (cronjob) Logging ACMECert logs its actions using error_log , which logs messages to stderr per default in PHP CLI so it is easy to log to a file instead: error_reporting(E_ALL); ini_set('log_errors',1); ini_set('error_log',dirname(__FILE__).'/ACMECert.log'); ## Disable error output If you want to disable the error output, you can use the `disableLog` method, Exceptions are nevertheless thrown. ```php $ac->disableLog(); ACME_Exception If the ACME-Server responded with an error message an \\skoerfgen\\ACMECert\\ACME_Exception is thrown. (ACME_Exception extends Exception) ACME_Exception has two additional functions: getType() to get the ACME error code: use skoerfgen\\ACMECert\\ACME_Exception; try { echo $ac->getAccountID().PHP_EOL; }catch(ACME_Exception $e){ if ($e->getType()=='urn:ietf:params:acme:error:accountDoesNotExist'){ echo 'Account does not exist'.PHP_EOL; }else{ throw $e; // another error occured } } getSubproblems() to get an array of ACME_Exception s if there is more than one error returned from the ACME-Server: try { $cert=$ac->getCertificateChain('file://'.'cert_private_key.pem',$domain_config,$handler); } catch (\\skoerfgen\\ACMECert\\ACME_Exception $e){ $ac->log($e->getMessage()); // log original error foreach($e->getSubproblems() as $subproblem){ $ac->log($subproblem->getMessage()); // log sub errors } } Function Reference ACMECert::__construct Creates a new ACMECert instance. public ACMECert::__construct ( string $ca_url = 'https://acme-v02.api.letsencrypt.org/directory' ) Parameters ca_url A string containing the URL to an ACME CA directory endpoint. Return Values Returns a new ACMECert instance. ACMECert::generateRSAKey Generate RSA private key (used as account key or private key for a certificate). public string ACMECert::generateRSAKey ( int $bits = 2048 ) Parameters bits RSA key size in bits. Return Values Returns the generated RSA private key as PEM encoded string. Errors/Exceptions Throws an Exception if the RSA key could not be generated. ACMECert::generateECKey Generate Elliptic Curve (EC) private key (used as account key or private key for a certificate). public string ACMECert::generateECKey ( string $curve_name = 'P-384' ) Parameters curve_name Supported Curves by Let\u2019s Encrypt: * P-256 (prime256v1) * P-384 (secp384r1) * ~~ P-521 (secp521r1)~~ Return Values Returns the generated EC private key as PEM encoded string. Errors/Exceptions Throws an Exception if the EC key could not be generated. ACMECert::loadAccountKey Load account key. public void ACMECert::loadAccountKey ( mixed $account_key_pem ) Parameters account_key_pem can be one of the following: * a string containing a PEM formatted private key. * a string beginning with file:// containing the filename to read a PEM formatted private key from. Return Values No value is returned. Errors/Exceptions Throws an Exception if the account key could not be loaded. ACMECert::register Associate the loaded account key with the CA account and optionally specify contacts. public array ACMECert::register ( bool $termsOfServiceAgreed = FALSE [, mixed $contacts = array() ] ) Parameters termsOfServiceAgreed By passing TRUE , you agree to the Terms Of Service of the selected CA. (Must be set to TRUE in order to successully register an account.) Hint: Use getTermsURL() to get the link to the current Terms Of Service. contacts can be one of the following: 1. A string containing an e-mail address 2. Array of e-mail addresses Return Values Returns an array containing the account information. Errors/Exceptions Throws an ACME_Exception if the server responded with an error message or an Exception if an other registration error occured. ACMECert::registerEAB Associate the loaded account key with the CA account using External Account Binding (EAB) credentials and optionally specify contacts. public array ACMECert::registerEAB ( bool $termsOfServiceAgreed, string $eab_kid, string $eab_hmac [, mixed $contacts = array() ] ) Parameters termsOfServiceAgreed By passing TRUE , you agree to the Terms Of Service of the selected CA. (Must be set to TRUE in order to successully register an account.) Hint: Use getTermsURL() to get the link to the current Terms Of Service. eab_kid a string specifying the EAB Key Identifier eab_hmac a string specifying the EAB HMAC Key contacts can be one of the following: 1. A string containing an e-mail address 2. Array of e-mail addresses Return Values Returns an array containing the account information. Errors/Exceptions Throws an ACME_Exception if the server responded with an error message or an Exception if an other registration error occured. ACMECert::update Update account contacts. public array ACMECert::update ( mixed $contacts = array() ) Parameters contacts can be one of the following: * A string containing an e-mail address * Array of e-mail addresses Return Values Returns an array containing the account information. Errors/Exceptions Throws an ACME_Exception if the server responded with an error message or an Exception if an other error occured updating the account. ACMECert::getAccount Get Account Information. public array ACMECert::getAccount() Return Values Returns an array containing the account information. Errors/Exceptions Throws an ACME_Exception if the server responded with an error message or an Exception if an other error occured getting the account information. ACMECert::getAccountID Get Account ID. public string ACMECert::getAccountID() Return Values Returns the Account ID Errors/Exceptions Throws an ACME_Exception if the server responded with an error message or an Exception if an other error occured getting the account id. ACMECert::keyChange Account Key Roll-over (exchange the current account key with another one). If the Account Key Roll-over succeeded, the new account key is automatically loaded via loadAccountKey public array ACMECert::keyChange ( mixed $new_account_key_pem ) Parameters new_account_key_pem can be one of the following: * a string containing a PEM formatted private key. * a string beginning with file:// containing the filename to read a PEM formatted private key from. Return Values Returns an array containing the account information. Errors/Exceptions Throws an ACME_Exception if the server responded with an error message or an Exception if an other error occured during key change. ACMECert::deactivateAccount Deactivate account. public array ACMECert::deactivateAccount() Return Values Returns an array containing the account information. Errors/Exceptions Throws an ACME_Exception if the server responded with an error message or an Exception if an other error occured during account deactivation. ACMECert::getCertificateChain Get certificate-chain (certificate + the intermediate certificate(s)). This is what Apache >= 2.4.8 needs for SSLCertificateFile , and what Nginx needs for ssl_certificate . public string ACMECert::getCertificateChain ( mixed $pem, array $domain_config, callable $callback, array $settings = array() ) Parameters pem A Private Key used for the certificate (the needed CSR is generated automatically using the given key in this case) or an already existing CSR in one of the following formats: a string containing a PEM formatted private key. a string beginning with file:// containing the filename to read a PEM encoded private key from. or a string beginning with file:// containing the filename to read a PEM encoded CSR from. a string containing the content of a CSR, PEM encoded, may start with -----BEGIN CERTIFICATE REQUEST----- domain_config An Array defining the domains and the corresponding challenge types to get a certificate for. The first one is used as Common Name for the certificate. Here is an example structure: $domain_config=array( '*.example.com'=>array('challenge'=>'dns-01'), 'test.example.org'=>array('challenge'=>'tls-alpn-01') 'test.example.net'=>array('challenge'=>'http-01','docroot'=>'/var/www/vhosts/test1.example.com'), ); Hint: Wildcard certificates ( *.example.com ) are only supported with the dns-01 challenge type. challenge is mandatory and has to be one of http-01 , dns-01 or tls-alpn-01 . All other keys are optional and up to you to be used and are later available in the callback function as $opts['config'] (see the http-01 example where docroot is used this way) callback Callback function which gets invoked every time a challenge needs to be fulfilled. callable callback ( array $opts ) Inside a callback function you can return another callback function, which gets invoked after the verification completed and the challenge tokens can be removed again. Hint: To get access to variables of the parent scope inside the callback function use the use languange construct: $handler=function($opts) use ($variable_from_parent_scope){}; ^^^ The $opts array passed to the callback function contains the following keys: $opts['domain'] Domain name to be validated. $opts['config'] Corresponding element of the domain_config array. $opts['key'] and $opts['value'] Contain the following, depending on the chosen challenge type: Challenge Type $opts['key'] $opts['value'] http-01 path + filename file contents dns-01 TXT Resource Record Name TXT Resource Record Value tls-alpn-01 unused token used in the acmeIdentifier extension of the verification certificate; use generateALPNCertificate to generate the verification certificate from that token. (see the tls-alpn-01 example ) settings (optional) This array can have the following keys: authz_reuse (boolean / default: TRUE ) If FALSE the callback function is always called for each domain and does not get skipped due to possibly already valid authorizations (authz) that are reused. This is achieved by deactivating already valid authorizations before getting new ones. Hint: Under normal circumstances this is only needed when testing the callback function, not in production! notBefore / notAfter (mixed) can be one of the following: * a string containing a RFC 3339 formated date * a timestamp (integer) Example: Certificate valid for 3 days: array( 'notAfter' => time() + (60*60*24) * 3 ) or array( 'notAfter' => '1970-01-01T01:22:17+01:00' ) Return Values Returns a PEM encoded certificate chain. Errors/Exceptions Throws an ACME_Exception if the server responded with an error message or an Exception if an other error occured obtaining the certificate. ACMECert::getCertificateChains Get all (default and alternate) certificate-chains. This function takes the same arguments as the getCertificateChain function above, but it returns an array of certificate chains instead of a single chain. public string ACMECert::getCertificateChains ( mixed $pem, array $domain_config, callable $callback, array $settings = array() ) Return Values Returns an array of PEM encoded certificate chains. The keys of the returned array correspond to the issuer Common Name (CN) of the topmost (closest to the root certificate) intermediate certificate. The first element of the returned array is the default chain. Errors/Exceptions Throws an ACME_Exception if the server responded with an error message or an Exception if an other error occured obtaining the certificate chains. ACMECert::revoke Revoke certificate. public void ACMECert::revoke ( mixed $pem ) Parameters pem can be one of the following: * a string beginning with file:// containing the filename to read a PEM encoded certificate or certificate-chain from. * a string containing the content of a certificate or certificate-chain, PEM encoded, may start with -----BEGIN CERTIFICATE----- Return Values No value is returned. If the function completes without Exception, the certificate was successully revoked. Errors/Exceptions Throws an ACME_Exception if the server responded with an error message or an Exception if an other error occured revoking the certificate. ACMECert::generateCSR Generate CSR for a set of domains. public string ACMECert::generateCSR ( mixed $private_key, array $domains ) Parameters private_key can be one of the following: * a string containing a PEM formatted private key. * a string beginning with file:// containing the filename to read a PEM formatted private key from. domains Array of domains Return Values Returns the generated CSR as string. Errors/Exceptions Throws an Exception if the CSR could not be generated. ACMECert::generateALPNCertificate Generate a self signed verification certificate containing the acmeIdentifier extension used in tls-alpn-01 challenge. public string ACMECert::generateALPNCertificate ( mixed $private_key, string $domain, string $token ) Parameters private_key private key used for the certificate. can be one of the following: * a string containing a PEM formatted private key. * a string beginning with file:// containing the filename to read a PEM formatted private key from. domain domain name to be validated. token verification token. Return Values Returns a PEM encoded verification certificate. Errors/Exceptions Throws an Exception if the certificate could not be generated. ACMECert::parseCertificate Get information about a certificate. public array ACMECert::parseCertificate ( mixed $pem ) Parameters pem can be one of the following: * a string beginning with file:// containing the filename to read a PEM encoded certificate or certificate-chain from. * a string containing the content of a certificate or certificate-chain, PEM encoded, may start with -----BEGIN CERTIFICATE----- Return Values Returns an array containing information about the certificate. Errors/Exceptions Throws an Exception if the certificate could not be parsed. ACMECert::getRemainingDays Get the number of days the certificate is still valid. public float ACMECert::getRemainingDays ( mixed $pem ) Parameters pem can be one of the following: * a string beginning with file:// containing the filename to read a PEM encoded certificate or certificate-chain from. * a string containing the content of a certificate or certificate-chain, PEM encoded, may start with -----BEGIN CERTIFICATE----- Return Values Returns how many days the certificate is still valid. Errors/Exceptions Throws an Exception if the certificate could not be parsed. ACMECert::splitChain Split a string containing a PEM encoded certificate chain into an array of individual certificates. public array ACMECert::splitChain ( string $pem ) Parameters pem * a certificate-chain as string, PEM encoded. Return Values Returns an array of PEM encoded individual certificates. Errors/Exceptions None ACMECert::getCAAIdentities Get a list of all CAA Identities for the selected CA. (Useful for setting up CAA DNS Records) public array ACMECert::getCAAIdentities() Return Values Returns an array containing all CAA Identities for the selected CA. Errors/Exceptions Throws an ACME_Exception if the server responded with an error message or an Exception if an other error occured getting the CAA Identities. ACMECert::getSAN Get all Subject Alternative Names of given certificate. public array ACMECert::getSAN( mixed $pem ) Parameters pem can be one of the following: * a string beginning with file:// containing the filename to read a PEM encoded certificate or certificate-chain from. * a string containing the content of a certificate or certificate-chain, PEM encoded, may start with -----BEGIN CERTIFICATE----- Return Values Returns an array containing all Subject Alternative Names of given certificate. Errors/Exceptions Throws an Exception if an error occured getting the Subject Alternative Names. ACMECert::getTermsURL Get URL to Terms Of Service for the selected CA. public array ACMECert::getTermsURL() Return Values Returns a string containing a URL to the Terms Of Service for the selected CA. Errors/Exceptions Throws an ACME_Exception if the server responded with an error message or an Exception if an other error occured getting the Terms Of Service. MIT License Copyright (c) 2018 Stefan K\u00f6rfgen Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"ACMECert"},{"location":"libraries/skoerfgen/index.html#acmecert","text":"PHP client library for Let's Encrypt and other ACME v2 - RFC 8555 compatible Certificate Authorities. Version: 3.2.2","title":"ACMECert"},{"location":"libraries/skoerfgen/index.html#description","text":"ACMECert is designed to help you to setup an automated SSL/TLS-certificate/renewal process with a few lines of PHP. It is self contained and contains a set of functions allowing you to: generate RSA / EC (Elliptic Curve) keys manage account: register / External Account Binding (EAB) / update / deactivate and account key roll-over get / revoke certificates (to renew a certificate just get a new one) parse certificates / get the remaining days a certificate is still valid and more.. see Function Reference for a full list It abstracts away the complexity of the ACME protocol to get a certificate (create order, fetch authorizations, compute challenge tokens, polling for status, generate CSR, finalize order, request certificate) into a single function getCertificateChain (or getCertificateChains to also get all alternate chains), where you specify a set of domains you want to get a certificate for and which challenge type to use (all challenge types are supported). This function takes as third argument a user-defined callback function which gets invoked every time a challenge needs to be fulfilled. It is up to you to set/remove the challenge tokens: $handler=function($opts){ // Write code to setup the challenge token here. // Return a function that gets called when the challenge token should be removed again: return function($opts){ // Write code to remove previously setup challenge token. }; }; $ac->getCertificateChain(..., ..., $handler); see description of getCertificateChain for details about the callback function. also see the Get Certificate examples below. Instead of returning FALSE on error, every function in ACMECert throws an Exception if it fails or an ACME_Exception if the ACME-Server reponded with an error message.","title":"Description"},{"location":"libraries/skoerfgen/index.html#requirements","text":"PHP 5.3 or higher (for EC keys PHP 7.1 or higher is required) OpenSSL extension enabled fopen wrappers (allow_url_fopen=1) or cURL extension","title":"Requirements"},{"location":"libraries/skoerfgen/index.html#require-acmecert","text":"manual download: https://github.com/skoerfgen/ACMECert/archive/master.zip usage: require 'ACMECert.php'; use skoerfgen\\ACMECert\\ACMECert; or download it using git : git clone https://github.com/skoerfgen/ACMECert usage: require 'ACMECert/ACMECert.php'; use skoerfgen\\ACMECert\\ACMECert; or download it using composer : composer require skoerfgen/acmecert usage: require 'vendor/autoload.php'; use skoerfgen\\ACMECert\\ACMECert;","title":"Require ACMECert"},{"location":"libraries/skoerfgen/index.html#usage-examples","text":"Simple example to get started","title":"Usage / Examples"},{"location":"libraries/skoerfgen/index.html#choose-certificate-authority-ca","text":"","title":"Choose Certificate Authority (CA)"},{"location":"libraries/skoerfgen/index.html#lets-encrypt","text":"Live CA $ac=new ACMECert('https://acme-v02.api.letsencrypt.org/directory'); Staging CA $ac=new ACMECert('https://acme-staging-v02.api.letsencrypt.org/directory');","title":"Let's Encrypt"},{"location":"libraries/skoerfgen/index.html#buypass","text":"Live CA $ac=new ACMECert('https://api.buypass.com/acme/directory'); Staging CA $ac=new ACMECert('https://api.test4.buypass.no/acme/directory');","title":"Buypass"},{"location":"libraries/skoerfgen/index.html#google-trust-services","text":"Live CA $ac=new ACMECert('https://dv.acme-v02.api.pki.goog/directory'); Staging CA $ac=new ACMECert('https://dv.acme-v02.test-api.pki.goog/directory');","title":"Google Trust Services"},{"location":"libraries/skoerfgen/index.html#sslcom","text":"Live CA $ac=new ACMECert('https://acme.ssl.com/sslcom-dv-rsa');","title":"SSL.com"},{"location":"libraries/skoerfgen/index.html#zerossl","text":"Live CA $ac=new ACMECert('https://acme.zerossl.com/v2/DV90');","title":"ZeroSSL"},{"location":"libraries/skoerfgen/index.html#or-any-other-acme-v2-rfc-8555-compatible-ca","text":"$ac=new ACMECert('INSERT_URL_TO_AMCE_CA_DIRECTORY_HERE');","title":"or any other (ACME v2 - RFC 8555) compatible CA"},{"location":"libraries/skoerfgen/index.html#generate-rsa-private-key","text":"$key=$ac->generateRSAKey(2048); file_put_contents('account_key.pem',$key); Equivalent to: openssl genrsa -out account_key.pem 2048","title":"Generate RSA Private Key"},{"location":"libraries/skoerfgen/index.html#generate-ec-private-key","text":"$key=$ac->generateECKey('P-384'); file_put_contents('account_key.pem',$key); Equivalent to: openssl ecparam -name secp384r1 -genkey -noout -out account_key.pem","title":"Generate EC Private Key"},{"location":"libraries/skoerfgen/index.html#register-account-key-with-ca","text":"$ac->loadAccountKey('file://'.'account_key.pem'); $ret=$ac->register(true,'info@example.com'); print_r($ret);","title":"Register Account Key with CA"},{"location":"libraries/skoerfgen/index.html#register-account-key-with-ca-using-external-account-binding","text":"$ac->loadAccountKey('file://'.'account_key.pem'); $ret=$ac->registerEAB(true,'INSERT_EAB_KEY_ID_HERE','INSERT_EAB_HMAC_HERE','info@example.com'); print_r($ret);","title":"Register Account Key with CA using External Account Binding"},{"location":"libraries/skoerfgen/index.html#get-certificate-using-http-01-challenge","text":"$ac->loadAccountKey('file://'.'account_key.pem'); $domain_config=array( 'test1.example.com'=>array('challenge'=>'http-01','docroot'=>'/var/www/vhosts/test1.example.com'), 'test2.example.com'=>array('challenge'=>'http-01','docroot'=>'/var/www/vhosts/test2.example.com') ); $handler=function($opts){ $fn=$opts['config']['docroot'].$opts['key']; @mkdir(dirname($fn),0777,true); file_put_contents($fn,$opts['value']); return function($opts){ unlink($opts['config']['docroot'].$opts['key']); }; }; // Generate new certificate key $private_key=$ac->generateRSAKey(2048); $fullchain=$ac->getCertificateChain($private_key,$domain_config,$handler); file_put_contents('fullchain.pem',$fullchain); file_put_contents('private_key.pem',$private_key);","title":"Get Certificate using http-01 challenge"},{"location":"libraries/skoerfgen/index.html#get-certificate-using-all-http-01dns-01-and-tls-alpn-01-challenge-types-together","text":"$ac->loadAccountKey('file://'.'account_key.pem'); $domain_config=array( 'example.com'=>array('challenge'=>'http-01','docroot'=>'/var/www/vhosts/example.com'), '*.example.com'=>array('challenge'=>'dns-01'), 'test.example.org'=>array('challenge'=>'tls-alpn-01') ); $handler=function($opts) use ($ac){ switch($opts['config']['challenge']){ case 'http-01': // automatic example: challenge directory/file is created.. $fn=$opts['config']['docroot'].$opts['key']; @mkdir(dirname($fn),0777,true); file_put_contents($fn,$opts['value']); return function($opts) use ($fn){ // ..and removed after validation completed unlink($fn); }; break; case 'dns-01': // manual example: echo 'Create DNS-TXT-Record '.$opts['key'].' with value '.$opts['value'].\"\\n\"; readline('Ready?'); return function($opts){ echo 'Remove DNS-TXT-Record '.$opts['key'].' with value '.$opts['value'].\"\\n\"; }; break; case 'tls-alpn-01': $cert=$ac->generateALPNCertificate('file://'.'some_private_key.pem',$opts['domain'],$opts['value']); // Use $cert and some_private_key.pem(<- does not have to be a specific key, // just make sure you generated one) to serve the certificate for $opts['domain'] // This example uses an included ALPN Responder - a standalone https-server // written in a few lines of node.js - which is able to complete this challenge. // store the generated verification certificate to be used by the ALPN Responder. file_put_contents('alpn_cert.pem',$cert); // To keep this example simple, the included Example ALPN Responder listens on port 443, // so - for the sake of this example - you have to stop the webserver here, like: shell_exec('/etc/init.d/apache2 stop'); // Start ALPN Responder (requires node.js) $resource=proc_open( 'node alpn_responder.js some_private_key.pem alpn_cert.pem', array( 0=>array('pipe','r'), 1=>array('pipe','w') ), $pipes ); // wait until alpn responder is listening fgets($pipes[1]); return function($opts) use ($resource,$pipes){ // Stop ALPN Responder fclose($pipes[0]); fclose($pipes[1]); proc_close($resource); shell_exec('/etc/init.d/apache2 start'); }; break; } }; // Example for using a pre-generated CSR as input to getCertificateChain instead of a private key: // $csr=$ac->generateCSR('file://'.'cert_private_key.pem',array_keys($domain_config)); // $fullchain=$ac->getCertificateChain($csr,$domain_config,$handler); $fullchain=$ac->getCertificateChain('file://'.'cert_private_key.pem',$domain_config,$handler); file_put_contents('fullchain.pem',$fullchain);","title":"Get Certificate using all (http-01,dns-01 and tls-alpn-01) challenge types together"},{"location":"libraries/skoerfgen/index.html#get-alternate-chains","text":"$chains=$ac->getCertificateChains('file://'.'cert_private_key.pem',$domain_config,$handler); if (isset($chains['ISRG Root X1'])){ // use alternate chain 'ISRG Root X1' $fullchain=$chains['ISRG Root X1']; }else{ // use default chain if 'ISRG Root X1' is not present $fullchain=reset($chains); } file_put_contents('fullchain.pem',$fullchain);","title":"Get alternate chains"},{"location":"libraries/skoerfgen/index.html#revoke-certificate","text":"$ac->loadAccountKey('file://'.'account_key.pem'); $ac->revoke('file://'.'fullchain.pem');","title":"Revoke Certificate"},{"location":"libraries/skoerfgen/index.html#get-account-information","text":"$ac->loadAccountKey('file://'.'account_key.pem'); $ret=$ac->getAccount(); print_r($ret);","title":"Get Account Information"},{"location":"libraries/skoerfgen/index.html#account-key-roll-over","text":"$ac->loadAccountKey('file://'.'account_key.pem'); $ret=$ac->keyChange('file://'.'new_account_key.pem'); print_r($ret);","title":"Account Key Roll-over"},{"location":"libraries/skoerfgen/index.html#deactivate-account","text":"$ac->loadAccountKey('file://'.'account_key.pem'); $ret=$ac->deactivateAccount(); print_r($ret);","title":"Deactivate Account"},{"location":"libraries/skoerfgen/index.html#get-remaining-days","text":"$days=$ac->getRemainingDays('file://'.'fullchain.pem'); // certificate or certificate-chain if ($days>30) { // renew 30 days before expiry die('Certificate still good, exiting..'); } // get new certificate here.. This allows you to run your renewal script without the need to time it exactly, just run it often enough. (cronjob)","title":"Get Remaining Days"},{"location":"libraries/skoerfgen/index.html#logging","text":"ACMECert logs its actions using error_log , which logs messages to stderr per default in PHP CLI so it is easy to log to a file instead: error_reporting(E_ALL); ini_set('log_errors',1); ini_set('error_log',dirname(__FILE__).'/ACMECert.log'); ## Disable error output If you want to disable the error output, you can use the `disableLog` method, Exceptions are nevertheless thrown. ```php $ac->disableLog();","title":"Logging"},{"location":"libraries/skoerfgen/index.html#acme_exception","text":"If the ACME-Server responded with an error message an \\skoerfgen\\ACMECert\\ACME_Exception is thrown. (ACME_Exception extends Exception) ACME_Exception has two additional functions: getType() to get the ACME error code: use skoerfgen\\ACMECert\\ACME_Exception; try { echo $ac->getAccountID().PHP_EOL; }catch(ACME_Exception $e){ if ($e->getType()=='urn:ietf:params:acme:error:accountDoesNotExist'){ echo 'Account does not exist'.PHP_EOL; }else{ throw $e; // another error occured } } getSubproblems() to get an array of ACME_Exception s if there is more than one error returned from the ACME-Server: try { $cert=$ac->getCertificateChain('file://'.'cert_private_key.pem',$domain_config,$handler); } catch (\\skoerfgen\\ACMECert\\ACME_Exception $e){ $ac->log($e->getMessage()); // log original error foreach($e->getSubproblems() as $subproblem){ $ac->log($subproblem->getMessage()); // log sub errors } }","title":"ACME_Exception"},{"location":"libraries/skoerfgen/index.html#function-reference","text":"","title":"Function Reference"},{"location":"libraries/skoerfgen/index.html#acmecert__construct","text":"Creates a new ACMECert instance. public ACMECert::__construct ( string $ca_url = 'https://acme-v02.api.letsencrypt.org/directory' )","title":"ACMECert::__construct"},{"location":"libraries/skoerfgen/index.html#parameters","text":"ca_url A string containing the URL to an ACME CA directory endpoint.","title":"Parameters"},{"location":"libraries/skoerfgen/index.html#return-values","text":"Returns a new ACMECert instance.","title":"Return Values"},{"location":"libraries/skoerfgen/index.html#acmecertgeneratersakey","text":"Generate RSA private key (used as account key or private key for a certificate). public string ACMECert::generateRSAKey ( int $bits = 2048 )","title":"ACMECert::generateRSAKey"},{"location":"libraries/skoerfgen/index.html#parameters_1","text":"bits RSA key size in bits.","title":"Parameters"},{"location":"libraries/skoerfgen/index.html#return-values_1","text":"Returns the generated RSA private key as PEM encoded string.","title":"Return Values"},{"location":"libraries/skoerfgen/index.html#errorsexceptions","text":"Throws an Exception if the RSA key could not be generated.","title":"Errors/Exceptions"},{"location":"libraries/skoerfgen/index.html#acmecertgenerateeckey","text":"Generate Elliptic Curve (EC) private key (used as account key or private key for a certificate). public string ACMECert::generateECKey ( string $curve_name = 'P-384' )","title":"ACMECert::generateECKey"},{"location":"libraries/skoerfgen/index.html#parameters_2","text":"curve_name Supported Curves by Let\u2019s Encrypt: * P-256 (prime256v1) * P-384 (secp384r1) * ~~ P-521 (secp521r1)~~","title":"Parameters"},{"location":"libraries/skoerfgen/index.html#return-values_2","text":"Returns the generated EC private key as PEM encoded string.","title":"Return Values"},{"location":"libraries/skoerfgen/index.html#errorsexceptions_1","text":"Throws an Exception if the EC key could not be generated.","title":"Errors/Exceptions"},{"location":"libraries/skoerfgen/index.html#acmecertloadaccountkey","text":"Load account key. public void ACMECert::loadAccountKey ( mixed $account_key_pem )","title":"ACMECert::loadAccountKey"},{"location":"libraries/skoerfgen/index.html#parameters_3","text":"account_key_pem can be one of the following: * a string containing a PEM formatted private key. * a string beginning with file:// containing the filename to read a PEM formatted private key from.","title":"Parameters"},{"location":"libraries/skoerfgen/index.html#return-values_3","text":"No value is returned.","title":"Return Values"},{"location":"libraries/skoerfgen/index.html#errorsexceptions_2","text":"Throws an Exception if the account key could not be loaded.","title":"Errors/Exceptions"},{"location":"libraries/skoerfgen/index.html#acmecertregister","text":"Associate the loaded account key with the CA account and optionally specify contacts. public array ACMECert::register ( bool $termsOfServiceAgreed = FALSE [, mixed $contacts = array() ] )","title":"ACMECert::register"},{"location":"libraries/skoerfgen/index.html#parameters_4","text":"termsOfServiceAgreed By passing TRUE , you agree to the Terms Of Service of the selected CA. (Must be set to TRUE in order to successully register an account.) Hint: Use getTermsURL() to get the link to the current Terms Of Service. contacts can be one of the following: 1. A string containing an e-mail address 2. Array of e-mail addresses","title":"Parameters"},{"location":"libraries/skoerfgen/index.html#return-values_4","text":"Returns an array containing the account information.","title":"Return Values"},{"location":"libraries/skoerfgen/index.html#errorsexceptions_3","text":"Throws an ACME_Exception if the server responded with an error message or an Exception if an other registration error occured.","title":"Errors/Exceptions"},{"location":"libraries/skoerfgen/index.html#acmecertregistereab","text":"Associate the loaded account key with the CA account using External Account Binding (EAB) credentials and optionally specify contacts. public array ACMECert::registerEAB ( bool $termsOfServiceAgreed, string $eab_kid, string $eab_hmac [, mixed $contacts = array() ] )","title":"ACMECert::registerEAB"},{"location":"libraries/skoerfgen/index.html#parameters_5","text":"termsOfServiceAgreed By passing TRUE , you agree to the Terms Of Service of the selected CA. (Must be set to TRUE in order to successully register an account.) Hint: Use getTermsURL() to get the link to the current Terms Of Service. eab_kid a string specifying the EAB Key Identifier eab_hmac a string specifying the EAB HMAC Key contacts can be one of the following: 1. A string containing an e-mail address 2. Array of e-mail addresses","title":"Parameters"},{"location":"libraries/skoerfgen/index.html#return-values_5","text":"Returns an array containing the account information.","title":"Return Values"},{"location":"libraries/skoerfgen/index.html#errorsexceptions_4","text":"Throws an ACME_Exception if the server responded with an error message or an Exception if an other registration error occured.","title":"Errors/Exceptions"},{"location":"libraries/skoerfgen/index.html#acmecertupdate","text":"Update account contacts. public array ACMECert::update ( mixed $contacts = array() )","title":"ACMECert::update"},{"location":"libraries/skoerfgen/index.html#parameters_6","text":"contacts can be one of the following: * A string containing an e-mail address * Array of e-mail addresses","title":"Parameters"},{"location":"libraries/skoerfgen/index.html#return-values_6","text":"Returns an array containing the account information.","title":"Return Values"},{"location":"libraries/skoerfgen/index.html#errorsexceptions_5","text":"Throws an ACME_Exception if the server responded with an error message or an Exception if an other error occured updating the account.","title":"Errors/Exceptions"},{"location":"libraries/skoerfgen/index.html#acmecertgetaccount","text":"Get Account Information. public array ACMECert::getAccount()","title":"ACMECert::getAccount"},{"location":"libraries/skoerfgen/index.html#return-values_7","text":"Returns an array containing the account information.","title":"Return Values"},{"location":"libraries/skoerfgen/index.html#errorsexceptions_6","text":"Throws an ACME_Exception if the server responded with an error message or an Exception if an other error occured getting the account information.","title":"Errors/Exceptions"},{"location":"libraries/skoerfgen/index.html#acmecertgetaccountid","text":"Get Account ID. public string ACMECert::getAccountID()","title":"ACMECert::getAccountID"},{"location":"libraries/skoerfgen/index.html#return-values_8","text":"Returns the Account ID","title":"Return Values"},{"location":"libraries/skoerfgen/index.html#errorsexceptions_7","text":"Throws an ACME_Exception if the server responded with an error message or an Exception if an other error occured getting the account id.","title":"Errors/Exceptions"},{"location":"libraries/skoerfgen/index.html#acmecertkeychange","text":"Account Key Roll-over (exchange the current account key with another one). If the Account Key Roll-over succeeded, the new account key is automatically loaded via loadAccountKey public array ACMECert::keyChange ( mixed $new_account_key_pem )","title":"ACMECert::keyChange"},{"location":"libraries/skoerfgen/index.html#parameters_7","text":"new_account_key_pem can be one of the following: * a string containing a PEM formatted private key. * a string beginning with file:// containing the filename to read a PEM formatted private key from.","title":"Parameters"},{"location":"libraries/skoerfgen/index.html#return-values_9","text":"Returns an array containing the account information.","title":"Return Values"},{"location":"libraries/skoerfgen/index.html#errorsexceptions_8","text":"Throws an ACME_Exception if the server responded with an error message or an Exception if an other error occured during key change.","title":"Errors/Exceptions"},{"location":"libraries/skoerfgen/index.html#acmecertdeactivateaccount","text":"Deactivate account. public array ACMECert::deactivateAccount()","title":"ACMECert::deactivateAccount"},{"location":"libraries/skoerfgen/index.html#return-values_10","text":"Returns an array containing the account information.","title":"Return Values"},{"location":"libraries/skoerfgen/index.html#errorsexceptions_9","text":"Throws an ACME_Exception if the server responded with an error message or an Exception if an other error occured during account deactivation.","title":"Errors/Exceptions"},{"location":"libraries/skoerfgen/index.html#acmecertgetcertificatechain","text":"Get certificate-chain (certificate + the intermediate certificate(s)). This is what Apache >= 2.4.8 needs for SSLCertificateFile , and what Nginx needs for ssl_certificate . public string ACMECert::getCertificateChain ( mixed $pem, array $domain_config, callable $callback, array $settings = array() )","title":"ACMECert::getCertificateChain"},{"location":"libraries/skoerfgen/index.html#parameters_8","text":"pem A Private Key used for the certificate (the needed CSR is generated automatically using the given key in this case) or an already existing CSR in one of the following formats: a string containing a PEM formatted private key. a string beginning with file:// containing the filename to read a PEM encoded private key from. or a string beginning with file:// containing the filename to read a PEM encoded CSR from. a string containing the content of a CSR, PEM encoded, may start with -----BEGIN CERTIFICATE REQUEST----- domain_config An Array defining the domains and the corresponding challenge types to get a certificate for. The first one is used as Common Name for the certificate. Here is an example structure: $domain_config=array( '*.example.com'=>array('challenge'=>'dns-01'), 'test.example.org'=>array('challenge'=>'tls-alpn-01') 'test.example.net'=>array('challenge'=>'http-01','docroot'=>'/var/www/vhosts/test1.example.com'), ); Hint: Wildcard certificates ( *.example.com ) are only supported with the dns-01 challenge type. challenge is mandatory and has to be one of http-01 , dns-01 or tls-alpn-01 . All other keys are optional and up to you to be used and are later available in the callback function as $opts['config'] (see the http-01 example where docroot is used this way) callback Callback function which gets invoked every time a challenge needs to be fulfilled. callable callback ( array $opts ) Inside a callback function you can return another callback function, which gets invoked after the verification completed and the challenge tokens can be removed again. Hint: To get access to variables of the parent scope inside the callback function use the use languange construct: $handler=function($opts) use ($variable_from_parent_scope){}; ^^^ The $opts array passed to the callback function contains the following keys: $opts['domain'] Domain name to be validated. $opts['config'] Corresponding element of the domain_config array. $opts['key'] and $opts['value'] Contain the following, depending on the chosen challenge type: Challenge Type $opts['key'] $opts['value'] http-01 path + filename file contents dns-01 TXT Resource Record Name TXT Resource Record Value tls-alpn-01 unused token used in the acmeIdentifier extension of the verification certificate; use generateALPNCertificate to generate the verification certificate from that token. (see the tls-alpn-01 example ) settings (optional) This array can have the following keys: authz_reuse (boolean / default: TRUE ) If FALSE the callback function is always called for each domain and does not get skipped due to possibly already valid authorizations (authz) that are reused. This is achieved by deactivating already valid authorizations before getting new ones. Hint: Under normal circumstances this is only needed when testing the callback function, not in production! notBefore / notAfter (mixed) can be one of the following: * a string containing a RFC 3339 formated date * a timestamp (integer) Example: Certificate valid for 3 days: array( 'notAfter' => time() + (60*60*24) * 3 ) or array( 'notAfter' => '1970-01-01T01:22:17+01:00' )","title":"Parameters"},{"location":"libraries/skoerfgen/index.html#return-values_11","text":"Returns a PEM encoded certificate chain.","title":"Return Values"},{"location":"libraries/skoerfgen/index.html#errorsexceptions_10","text":"Throws an ACME_Exception if the server responded with an error message or an Exception if an other error occured obtaining the certificate.","title":"Errors/Exceptions"},{"location":"libraries/skoerfgen/index.html#acmecertgetcertificatechains","text":"Get all (default and alternate) certificate-chains. This function takes the same arguments as the getCertificateChain function above, but it returns an array of certificate chains instead of a single chain. public string ACMECert::getCertificateChains ( mixed $pem, array $domain_config, callable $callback, array $settings = array() )","title":"ACMECert::getCertificateChains"},{"location":"libraries/skoerfgen/index.html#return-values_12","text":"Returns an array of PEM encoded certificate chains. The keys of the returned array correspond to the issuer Common Name (CN) of the topmost (closest to the root certificate) intermediate certificate. The first element of the returned array is the default chain.","title":"Return Values"},{"location":"libraries/skoerfgen/index.html#errorsexceptions_11","text":"Throws an ACME_Exception if the server responded with an error message or an Exception if an other error occured obtaining the certificate chains.","title":"Errors/Exceptions"},{"location":"libraries/skoerfgen/index.html#acmecertrevoke","text":"Revoke certificate. public void ACMECert::revoke ( mixed $pem )","title":"ACMECert::revoke"},{"location":"libraries/skoerfgen/index.html#parameters_9","text":"pem can be one of the following: * a string beginning with file:// containing the filename to read a PEM encoded certificate or certificate-chain from. * a string containing the content of a certificate or certificate-chain, PEM encoded, may start with -----BEGIN CERTIFICATE-----","title":"Parameters"},{"location":"libraries/skoerfgen/index.html#return-values_13","text":"No value is returned. If the function completes without Exception, the certificate was successully revoked.","title":"Return Values"},{"location":"libraries/skoerfgen/index.html#errorsexceptions_12","text":"Throws an ACME_Exception if the server responded with an error message or an Exception if an other error occured revoking the certificate.","title":"Errors/Exceptions"},{"location":"libraries/skoerfgen/index.html#acmecertgeneratecsr","text":"Generate CSR for a set of domains. public string ACMECert::generateCSR ( mixed $private_key, array $domains )","title":"ACMECert::generateCSR"},{"location":"libraries/skoerfgen/index.html#parameters_10","text":"private_key can be one of the following: * a string containing a PEM formatted private key. * a string beginning with file:// containing the filename to read a PEM formatted private key from. domains Array of domains","title":"Parameters"},{"location":"libraries/skoerfgen/index.html#return-values_14","text":"Returns the generated CSR as string.","title":"Return Values"},{"location":"libraries/skoerfgen/index.html#errorsexceptions_13","text":"Throws an Exception if the CSR could not be generated.","title":"Errors/Exceptions"},{"location":"libraries/skoerfgen/index.html#acmecertgeneratealpncertificate","text":"Generate a self signed verification certificate containing the acmeIdentifier extension used in tls-alpn-01 challenge. public string ACMECert::generateALPNCertificate ( mixed $private_key, string $domain, string $token )","title":"ACMECert::generateALPNCertificate"},{"location":"libraries/skoerfgen/index.html#parameters_11","text":"private_key private key used for the certificate. can be one of the following: * a string containing a PEM formatted private key. * a string beginning with file:// containing the filename to read a PEM formatted private key from. domain domain name to be validated. token verification token.","title":"Parameters"},{"location":"libraries/skoerfgen/index.html#return-values_15","text":"Returns a PEM encoded verification certificate.","title":"Return Values"},{"location":"libraries/skoerfgen/index.html#errorsexceptions_14","text":"Throws an Exception if the certificate could not be generated.","title":"Errors/Exceptions"},{"location":"libraries/skoerfgen/index.html#acmecertparsecertificate","text":"Get information about a certificate. public array ACMECert::parseCertificate ( mixed $pem )","title":"ACMECert::parseCertificate"},{"location":"libraries/skoerfgen/index.html#parameters_12","text":"pem can be one of the following: * a string beginning with file:// containing the filename to read a PEM encoded certificate or certificate-chain from. * a string containing the content of a certificate or certificate-chain, PEM encoded, may start with -----BEGIN CERTIFICATE-----","title":"Parameters"},{"location":"libraries/skoerfgen/index.html#return-values_16","text":"Returns an array containing information about the certificate.","title":"Return Values"},{"location":"libraries/skoerfgen/index.html#errorsexceptions_15","text":"Throws an Exception if the certificate could not be parsed.","title":"Errors/Exceptions"},{"location":"libraries/skoerfgen/index.html#acmecertgetremainingdays","text":"Get the number of days the certificate is still valid. public float ACMECert::getRemainingDays ( mixed $pem )","title":"ACMECert::getRemainingDays"},{"location":"libraries/skoerfgen/index.html#parameters_13","text":"pem can be one of the following: * a string beginning with file:// containing the filename to read a PEM encoded certificate or certificate-chain from. * a string containing the content of a certificate or certificate-chain, PEM encoded, may start with -----BEGIN CERTIFICATE-----","title":"Parameters"},{"location":"libraries/skoerfgen/index.html#return-values_17","text":"Returns how many days the certificate is still valid.","title":"Return Values"},{"location":"libraries/skoerfgen/index.html#errorsexceptions_16","text":"Throws an Exception if the certificate could not be parsed.","title":"Errors/Exceptions"},{"location":"libraries/skoerfgen/index.html#acmecertsplitchain","text":"Split a string containing a PEM encoded certificate chain into an array of individual certificates. public array ACMECert::splitChain ( string $pem )","title":"ACMECert::splitChain"},{"location":"libraries/skoerfgen/index.html#parameters_14","text":"pem * a certificate-chain as string, PEM encoded.","title":"Parameters"},{"location":"libraries/skoerfgen/index.html#return-values_18","text":"Returns an array of PEM encoded individual certificates.","title":"Return Values"},{"location":"libraries/skoerfgen/index.html#errorsexceptions_17","text":"None","title":"Errors/Exceptions"},{"location":"libraries/skoerfgen/index.html#acmecertgetcaaidentities","text":"Get a list of all CAA Identities for the selected CA. (Useful for setting up CAA DNS Records) public array ACMECert::getCAAIdentities()","title":"ACMECert::getCAAIdentities"},{"location":"libraries/skoerfgen/index.html#return-values_19","text":"Returns an array containing all CAA Identities for the selected CA.","title":"Return Values"},{"location":"libraries/skoerfgen/index.html#errorsexceptions_18","text":"Throws an ACME_Exception if the server responded with an error message or an Exception if an other error occured getting the CAA Identities.","title":"Errors/Exceptions"},{"location":"libraries/skoerfgen/index.html#acmecertgetsan","text":"Get all Subject Alternative Names of given certificate. public array ACMECert::getSAN( mixed $pem )","title":"ACMECert::getSAN"},{"location":"libraries/skoerfgen/index.html#parameters_15","text":"pem can be one of the following: * a string beginning with file:// containing the filename to read a PEM encoded certificate or certificate-chain from. * a string containing the content of a certificate or certificate-chain, PEM encoded, may start with -----BEGIN CERTIFICATE-----","title":"Parameters"},{"location":"libraries/skoerfgen/index.html#return-values_20","text":"Returns an array containing all Subject Alternative Names of given certificate.","title":"Return Values"},{"location":"libraries/skoerfgen/index.html#errorsexceptions_19","text":"Throws an Exception if an error occured getting the Subject Alternative Names.","title":"Errors/Exceptions"},{"location":"libraries/skoerfgen/index.html#acmecertgettermsurl","text":"Get URL to Terms Of Service for the selected CA. public array ACMECert::getTermsURL()","title":"ACMECert::getTermsURL"},{"location":"libraries/skoerfgen/index.html#return-values_21","text":"Returns a string containing a URL to the Terms Of Service for the selected CA.","title":"Return Values"},{"location":"libraries/skoerfgen/index.html#errorsexceptions_20","text":"Throws an ACME_Exception if the server responded with an error message or an Exception if an other error occured getting the Terms Of Service. MIT License Copyright (c) 2018 Stefan K\u00f6rfgen Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Errors/Exceptions"},{"location":"libraries/skoerfgen/LICENSE.html","text":"MIT License Copyright (c) 2018 Stefan K\u00f6rfgen Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"LICENSE"}]}; var __search = { index: Promise.resolve(local_index) }